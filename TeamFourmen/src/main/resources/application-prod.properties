
server.port=5000

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.MySQLDialect

# SIMKL API KEY
api.simkl.client-id=0a4f4a20f8752e19ea7f578c515b6b7008a70e6acf87ce6a9447ca23e3bf2d2a

# SIMKL TOKEN
api.simkl.client-secret=403c8d92e6f68cf937c4c107d13be642013c4c5d6e873f2378deac2040b4dd30


# JPA/Hibernate에서 DDL (create, drop, alter) 문장을 자동으로 생성/실행하게 함. 스프링 부트 어플리케이션이 실행될 때 drop table을 실행하고 create table을 실행함
# -> 실제(현업) 동작중인 어플리케이션에서는 절대로 사용하면 안 됨. 테스트 용도로만 사용
# ddl-auto = none (기본값)으로 설정하면 create table을 실행하지 않음.
spring.jpa.hibernate.ddl-auto=none

# JPA/Hibernate에서 자동으로 생성되는 SQL 문장을 포매팅해서 로그로 출력
spring.jpa.properties.hibernate.format_sql=true

# JPA/Hibernate에서 자동으로 생성되는 SQL 문장에 색상을 입혀서 출력.
spring.jpa.properties.hibernate.highlight_sql=true

# Hibernate의 로그 레벨을 설정.
# (trace < debug < info < warn < error < fatal)
logging.level.org.hibernate.SQL=debug

# PreparedStatement의 바인딩 파라미터 순서/값을 로그로 출력하기 위해서
logging.level.org.hibernate.orm.jdbc.bind=trace

# spring security의 로그 레벨을 설정
logging.level.org.springframework.security=debug


spring.devtools.restart.enabled=true

# TMDB 토큰값
tmdb.hd.token=Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI2ZDI4ZDdiZDdlNTUwZWE4NmRmMmI2NGRmYjJhYmUzNiIsInN1YiI6IjY1YjA5NzdkZGQ5MjZhMDE3MzRjZDQxNSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.VpevgFlBqIQZ7hzHFm5gib-kLSaWg8uFl9814rvllnU
tmdb.api-key=6d28d7bd7e550ea86df2b64dfb2abe36
tmdb.api.baseurl=https://api.themoviedb.org/3

# context root
app.context-root=http://www.fourmenmedia.link

spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false

# GMail 설정
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=wlgh9770@gmail.com
spring.mail.password=rzju hzok gfbv nhwe
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

#문자 메세지 전송
coolsms.api.key="your API Key"
coolsms.api.secret="your API Secret"

#kakao OAuth2 설정
spring.security.oauth2.client.registration.kakao.client-id= 1b10b82f3563f31a47b250b62ca94db6
spring.security.oauth2.client.registration.kakao.client-secret=dYcrE7WnyCZLPIEws9kBZl8kzwNMWw9B
spring.security.oauth2.client.registration.kakao.redirect-uri={baseUrl}/oauth2/callback/{registrationId}
spring.security.oauth2.client.registration.kakao.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.kakao.client-authentication-method=client_secret_post
spring.security.oauth2.client.registration.kakao.scope=profile_nickname

#kakao OAuth2 provider설정
spring.security.oauth2.client.provider.kakao.authorization-uri=https://kauth.kakao.com/oauth/authorize
spring.security.oauth2.client.provider.kakao.token-uri=https://kauth.kakao.com/oauth/token
spring.security.oauth2.client.provider.kakao.user-info-uri=https://kapi.kakao.com/v2/user/me
spring.security.oauth2.client.provider.kakao.user-name-attribute=id


#네이버 OAuth2 설정
spring.security.oauth2.client.registration.naver.client-id=NccKFQR4sIZ2_ExxYtlu
spring.security.oauth2.client.registration.naver.client-secret=QGmzlYj6eb
spring.security.oauth2.client.registration.naver.redirect-uri={baseUrl}/oauth2/callback/{registrationId}
spring.security.oauth2.client.registration.naver.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.naver.scope=email

#네이버 OAuth2 provider설정
spring.security.oauth2.client.provider.naver.authorization-uri=https://nid.naver.com/oauth2.0/authorize
spring.security.oauth2.client.provider.naver.token-uri=https://nid.naver.com/oauth2.0/token
spring.security.oauth2.client.provider.naver.user-info-uri=https://openapi.naver.com/v1/nid/me
spring.security.oauth2.client.provider.naver.user-name-attribute=response

#aws
cloud.aws.s3.bucket=teamfourmen-final
cloud.aws.stack.auto=false
cloud.aws.region.static=ap-northeast-2
#
secret-key=ThisStatementIsJwtSecretKeyDoNotUseThisStatement